{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Python User Define Function Practice Activity - 2 "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Asst. Prof. Syed Faisal Ali              $\\;\\;\\;\\;\\;\\;$              Programming Fundamentals - FALL 2019 $\\;\\;\\;\\;\\;\\;$ Software Engineering                     $\\;\\;\\;\\;\\;\\;$                   Dated: 27 Nov 2019"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Question 1: Create a function to find the following:\n",
    "If the base of triangle is 3 cm long and its equilateral triangle and the radius of circle is 1.5 cm then find the area of triangle shaded. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![proj](q1.jpg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The perimeter of the circle is (with 5% increment): 32.991cm\n",
      "The area of the cicle is (with 5% increment): 82.478cm.sq\n"
     ]
    }
   ],
   "source": [
    "#TIME TAKEN: 4 Minutes\n",
    "def area(base,height):\n",
    "    decimal=3\n",
    "    area_triangle=(1/2)*base*height\n",
    "    print(\"The area of the triangle is: {0:.{1}f}cm.sq\".format(area_triangle,decimal))\n",
    "area(3,1.5)   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Question 2: Create a function which can read a dictionary of your family members such as 5 members. \n",
    "1 Abbu, 1 Ammi, 2 Brothers 1 Sister. Now feed this data in dictionary in terms of name and relations.\n",
    "The UDF will ask findrelation() in this you will enter Brother it will return the names of two brothers you have inserted. In case if the relation is not found it will return “Sorry the relation doesn’t exist in your family.” \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Ayyan, Ahmed'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#TIME TAKEN: 1hr:35min\n",
    "members={'Nafees': 'Father', 'Samrah': 'Mother', 'Ayyan, Ahmed': 'Brother', 'Sausan': 'Sister'}\n",
    "def findrelation(family_member):\n",
    "    for k, v in members.items():\n",
    "        if v.lower() == family_member.lower():\n",
    "            return k\n",
    "    print(members)\n",
    "            \n",
    "findrelation('Brother')    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Question 3: Create a function to find the following:\n",
    "If the base of triangle is 5 cm long and its equilateral triangle and the radius of circle is 2.25 cm then find the area of triangle shaded. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![proj](q3.jpg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The area of the triangle is: 5.625cm.sq\n"
     ]
    }
   ],
   "source": [
    "#TIME TAKEN: 4 Minutes\n",
    "def area(base,height):\n",
    "    decimal=3\n",
    "    area_triangle=(1/2)*base*height\n",
    "    print(\"The area of the triangle is: {0:.{1}f}cm.sq\".format(area_triangle,decimal))\n",
    "area(5,2.25)   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Question 4:\n",
    "Create a function that takes a list of random numbers from users and add only those which are even. If all the numbers are odd it will return sorry no even number found.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Question 5:\n",
    "Write a function which can take a list of numbers and it will return sorted list.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Question 6:\n",
    "Write a function that will take the radius and return the perimeter and area of circle with 5% increment.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The perimeter of the circle is (with 5% increment): 32.991cm\n",
      "The area of the cicle is (with 5% increment): 82.478cm.sq\n"
     ]
    }
   ],
   "source": [
    "#TIME TAKEN: 15 minutes\n",
    "def circle(pi,radius):\n",
    "    decimal=3\n",
    "    \n",
    "    perimeter=2*pi*radius\n",
    "    p_increm=(2*pi*radius)*(1+(5/100))\n",
    "    area=pi*(radius**2)\n",
    "    a_increm=((pi*(radius**2))*(1+(5/100)))\n",
    "    print(\"The perimeter of the circle is (with 5% increment): {0:.{1}f}cm\".format(p_increm,decimal))\n",
    "    print(\"The area of the cicle is (with 5% increment): {0:.{1}f}cm.sq\".format(a_increm,decimal))\n",
    "    \n",
    "circle(3.142,5)    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Question 7:\n",
    "Write a function that will take the strings as argument and return number of vowels and consonants.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of vowels in the string: 6\n",
      "Number of consonants in the string: 8\n"
     ]
    }
   ],
   "source": [
    "#TIME TAKEN: 15 Minutes\n",
    "def string(w):\n",
    "    vowels=0\n",
    "    consonants=0\n",
    "    for i in w:\n",
    "        if i in 'aeiouAEIOU':\n",
    "            vowels=vowels+1\n",
    "        else: \n",
    "            consonants=consonants+1\n",
    "    print('Number of vowels in the string:',vowels)\n",
    "    print('Number of consonants in the string:',consonants)\n",
    "string('Shereen Faruqi')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Question 8:\n",
    "Write a function that will take length and breadth for a rectangle and return perimeter and area of rectangle with 8% increment.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The perimeter of the rectangle is (with 8% increment): 25.920cm\n",
      "The area of the rectangle is (with 8% increment): 34.560cm.sq\n"
     ]
    }
   ],
   "source": [
    "#TIME TAKEN: 5 Minutes\n",
    "def rectangle(length,breadth):\n",
    "    decimal=3\n",
    "    #Perimeter is also: p=length+breadth+length+breadth\n",
    "    perimeter_rec= 2*(length+breadth)\n",
    "    perimeter_increm=(2*(length+breadth))*(1+(8/100))\n",
    "    area_rec=length*breadth\n",
    "    area_increm=(length*breadth)*(1+(8/100))\n",
    "    print(\"The perimeter of the rectangle is (with 8% increment): {0:.{1}f}cm\".format(perimeter_increm,decimal))\n",
    "    print(\"The area of the rectangle is (with 8% increment): {0:.{1}f}cm.sq\".format(area_increm,decimal))\n",
    "    \n",
    "rectangle(4,8)    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Question 9:\n",
    "Write a function that can take the numbers in strings. From string find which number is even and which one is odd. Save them in two different lists and generate the result.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Question 10:\n",
    "Write a function which will take the string from the user and return how many alphabets have been used in it and which alphabets are missing.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of used letters: 1\n",
      "Number of missing letters: 1\n"
     ]
    }
   ],
   "source": [
    "#TIME TAKEN: 30 Minutes\n",
    "def word(string):\n",
    "    letters_used=0\n",
    "    letters_missing=0\n",
    "    for i in string:\n",
    "        if i in 'abcefghijklmnopqrstuvwxyz':\n",
    "            letters_used=0+1\n",
    "        else:\n",
    "            letters_missing=0+1\n",
    "    print('Number of used letters:',letters_used)\n",
    "    print('Number of missing letters:',letters_missing)\n",
    "word('abcdefhijlmnpqstuvwxyz')        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Question 11:\n",
    "Write a function that will take verbs in words and return a list of verbs with continuous tense by adding (ing) at the end of each verb.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "verbs=['jump', 'run',  'walk', 'talk']\n",
    "def verb(w):\n",
    "    a=verbs.append('ing')\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Question 12:\n",
    "Make a function which can take two radius of circles and find the areas of it and subtract smaller one from larger one and tell the remaining area of circle.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1st area is: 50.272\n",
      "2nd area is: 153.958\n",
      "The remaining area is: 103.686\n"
     ]
    }
   ],
   "source": [
    "#TIME TAKEN: 4 MINUTES\n",
    "def area(pi,radius1,radius2):\n",
    "    decimal=3\n",
    "    area1=pi*(radius1**2)\n",
    "    print('1st area is:',area1)\n",
    "    area2=pi*(radius2**2)\n",
    "    print('2nd area is:',area2)\n",
    "    rem_area=area2-area1\n",
    "    print('The remaining area is:',rem_area)\n",
    "    \n",
    "area(3.142,4,7)    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Question 13:\n",
    "Write a function that will take a string and calculate number of Upper case letters and lower case letters.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original String :  Usman Institute of Technology\n",
      "No. of Upper case characters :  3\n",
      "No. of Lower case Characters :  23\n"
     ]
    }
   ],
   "source": [
    "#TIME TAKEN: 1HR:25MINS\n",
    "def string(s):\n",
    "    d={\"UPPER\":0, \"lower\":0}\n",
    "    for c in s:\n",
    "        if c.isupper():\n",
    "            d[\"UPPER\"]+=1\n",
    "        elif c.islower():\n",
    "            d[\"lower\"]+=1\n",
    "        else:\n",
    "            pass\n",
    "    print (\"Original String : \", s)\n",
    "    print (\"No. of Upper case characters : \", d[\"UPPER\"])\n",
    "    print (\"No. of Lower case Characters : \", d[\"lower\"])\n",
    "string('Usman Institute of Technology')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Question 14:\n",
    "Write a function which will take length and breadth of two rectangles. Subtract the smaller rectangle from the larger rectangle and return the area left behind.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Area of 1st rectangle is: 10.000cm.sq\n",
      "Area of the 2nd rectangle is: 24.000cm.sq\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "14"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#TIME TAKEN: 5 Minutes\n",
    "def rectangle(length1,breadth1,length2,breadth2):\n",
    "    decimal=3\n",
    "    area1=length1*breadth1\n",
    "    print(\"Area of 1st rectangle is: {0:.{1}f}cm.sq\".format(area1,decimal))\n",
    "    area2=length2*breadth2\n",
    "    print(\"Area of the 2nd rectangle is: {0:.{1}f}cm.sq\".format(area2,decimal))\n",
    "    area_left=area2-area1\n",
    "    return area_left\n",
    "rectangle(2,5,4,6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Question 15:\n",
    "Create a function that can add the fractions in series such as 1 to 8 = 1/8+1/7+1/6+1/5 …… ½ and return the result in fraction not in decimal.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Question 16:\n",
    "Write a function which will take height and base for a triangle and \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Question 17:\n",
    "Write a function which will take a list of fruits names. The function will return how many alphabets are repetitive in the names of fruits and how many are unique letters.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Question 18:\n",
    "Write a function that can take square length and radius of circle. Find the area of both and subtract the smallest shape from largest one and return the remaining shape area.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Area of square is: 25.000cm.sq\n",
      "Area of circle is: 153.958cm.sq\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "128.958"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#TIME TAKEN: 3 Minutes\n",
    "def sandc(length,radius,pi):\n",
    "    decimal=3\n",
    "    area_sq=length**2\n",
    "    area_circle=pi*(radius**2)\n",
    "    rem_shape=area_circle-area_sq\n",
    "    print(\"Area of square is: {0:.{1}f}cm.sq\".format(area_sq,decimal))\n",
    "    print(\"Area of circle is: {0:.{1}f}cm.sq\".format(area_circle,decimal))\n",
    "    return rem_shape\n",
    "sandc(5,7,3.142)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
